// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Lobby {
  id           String   @id @default(cuid())
  joinCode     Int      @unique
  lastUpdated  DateTime @default(now())
  ownerId      String
  results      String[] @default([])
  players      String[] @default([])
  started      Boolean  @default(false)
  ended        Boolean  @default(false)
  count        Int      @default(2)
  gameMode     Int      @default(1)
  owner        User     @relation(name: "LobbyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  participants User[]   @relation(name: "LobbyParticipants")
}

model Leaderboard {
  userId String @unique @id
  rank   Int?
  score  Float?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  uniqueName    String    @unique @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  banned        Boolean   @default(false)
  accounts      Account[]
  settings      Settings?
  sessions      Session[]

  playsEver Int     @default(0)
  scoreEver Int     @default(0)
  timeEver  Int     @default(0)
  county    String?

  lobbyId       String?
  participating Lobby?  @relation(name: "LobbyParticipants", fields: [lobbyId], references: [id])
  ownedLobbies  Lobby[] @relation(name: "LobbyOwner")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Leaderboard   Leaderboard?
  Authenticator Authenticator[]
}

model Settings {
  userId String @id

  emailNotification   Boolean @default(false)
  discordNotification Boolean @default(false)

  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
